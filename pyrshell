#!/usr/bin/env python3
import sys
import os
import serial.tools.list_ports

"""
Usage: pyrshell [device|device_index]
Launch rshell on "device". If device is not given, looks for Micropython devices
and pick the first one (but prints all devices found).
"""
def main():
  if (len(sys.argv) > 1) and not sys.argv[1].isdigit() :
    pyports = [serial.tools.list_ports_common.ListPortInfo(sys.argv[1])]
    pyports[0].device = sys.argv[1]
  else:
    ports = serial.tools.list_ports.comports()
    pyports = []
    for p in ports :
      if p.manufacturer in ['Micro Python',\
                            'MicroPython',\
                            'OpenMV',\
                            'Silicon Labs',\
                            'Microsoft'] \
      or 'USB to UART' in p.description :
        pyports.append(p)
    if len(pyports) == 0 :
      print("No MicroPython device found")
      for p in ports :
        print("  " + p.device
            + " - " + (p.manufacturer if p.manufacturer is not None
                                      else "No manufacturer")
            + " / "
            + (p.description if p.description is not None
                             else "No description")
        )
      sys.exit(1)
    if len(pyports) > 1 :
      print("MicroPython devices found:")
      idx = 0
      for p in pyports :
        print("  (" + str(idx) + ") " + p.device + " - " + p.description)
        idx += 1
  idx = 0
  if len(sys.argv) > 1 and sys.argv[1].isdigit() :
    idx = int(sys.argv[1])
    if idx >= len(pyports) :
      print("Sorry, port index " + sys.argv[1] + " out of range")
      sys.exit(1)
  elif len(pyports) > 1 :
    print("Please chose the device to which you want to connect")
    sys.exit(1)
  
  os.system('rshell --port ' + pyports[idx].device + ' --baud 115200')

if __name__ == "__main__":
    main()
